<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Network on Chasing1020</title>
        <link>https://chasing1020.github.io/tags/network/</link>
        <description>Recent content in Network on Chasing1020</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Tue, 18 Jan 2022 22:37:50 +0800</lastBuildDate><atom:link href="https://chasing1020.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TCP Congestion Control</title>
        <link>https://chasing1020.github.io/post/tcp-congestion-control/</link>
        <pubDate>Tue, 18 Jan 2022 22:37:50 +0800</pubDate>
        
        <guid>https://chasing1020.github.io/post/tcp-congestion-control/</guid>
        <description>&lt;img src="https://chasing1020.github.io/post/tcp-congestion-control/tcp.webp" alt="Featured image of post TCP Congestion Control" /&gt;&lt;h1 id=&#34;1-overview&#34;&gt;1. Overview&lt;/h1&gt;
&lt;p&gt;最初的TCP因为不支持拥塞控制而频繁被丢弃数据包，协议栈被投入使用8年后，Van Jacobson在1988年将 &lt;a class=&#34;link&#34; href=&#34;http://www.cs.binghamton.edu/~nael/cs428-528/deeper/jacobson-congestion.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP 拥塞控制&lt;/a&gt;引入网络。&lt;/p&gt;
&lt;p&gt;IP层并没有提供拥塞控制功能，各个主机不知道什么是合理的速度。理想场景利用负反馈控制窗口，每一个TCP连接，引入变量&lt;code&gt;CongestionWindow&lt;/code&gt;与&lt;code&gt;SlowStartThreshold&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;2-tahoe&#34;&gt;2. Tahoe&lt;/h1&gt;
&lt;p&gt;定义拥塞发生事件：超时或者是3个冗余ACK。MSS：Maximum Segment Size&lt;/p&gt;
&lt;p&gt;SlowStart（SS）状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一次RTT，cwnd&amp;gt;&amp;gt;=1，保持SS。&lt;/li&gt;
&lt;li&gt;超时或者是3-ACK：重发，cwnd=1MSS，ssthresh=cwnd&amp;gt;&amp;gt;1，保持SS。&lt;/li&gt;
&lt;li&gt;如果达到警戒阈值，进入CA。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CongestionAvoidance（CA）状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一次RTT，cwnd倍增，保持CA。&lt;/li&gt;
&lt;li&gt;超时或者是3-ACK：重发，cwnd=1MSS，进入SS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-reno&#34;&gt;3. Reno&lt;/h1&gt;
&lt;p&gt;定义新的状态：FastRecovery，考虑到2-ACK必定乱序造成的，丢包肯定会造成2-ACK。但是超时的情况下必定会进入SS。&lt;/p&gt;
&lt;p&gt;SlowStart（SS）状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一次RTT，cwnd倍增。&lt;/li&gt;
&lt;li&gt;超时：重发，cwnd=1MSS，ssthresh=cwnd&amp;gt;&amp;gt;1，保持SS。&lt;/li&gt;
&lt;li&gt;3-ACK：&lt;code&gt;快速重传&lt;/code&gt;，ssthresh=cwnd&amp;gt;&amp;gt;1，cwnd=ssthresh+3，进入FR。&lt;/li&gt;
&lt;li&gt;如果达到警戒阈值，进入CA。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CongestionAvoidance（CA）状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每一次RTT，cwnd倍增。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时：重发，cwnd=1MSS，进入SS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3-ACK：ssthresh=cwnd&amp;gt;&amp;gt;1，cwnd=ssthresh+3，重传，进入FR。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FastRecovery（FR）状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dupACK: cwnd=cwnd+1MSS，保持FR。&lt;/li&gt;
&lt;li&gt;newACK：cwnd=ssthresth，进入CA。&lt;/li&gt;
&lt;li&gt;超时：ssthtresh=cwnd&amp;gt;&amp;gt;1，cwnd=1，重传，进入SS。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-new-reno&#34;&gt;4. New Reno&lt;/h1&gt;
&lt;p&gt;Reno存在的问题：从FR恢复过快，但是实际上在拥塞时分组是成串被丢弃的，后面段的丢失，超时后还是会进入进入SS，使得cwnd又回到1。&lt;/p&gt;
&lt;p&gt;改进：由发送方记住缺少确认的段，当这些缺少的段都被确认后，再走出FR状态。&lt;/p&gt;
&lt;p&gt;FastRecovery（FR）状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dupACK：同上，cwnd=cwnd+1，保持FR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部分确认（PACK）：收到部分新确认，保持FR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送确认后面的段，冗余ACK数量=0， 定时器复位不要超时了， cwnd=cwnd+1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有新段可以发送，发送新的段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恢复确认（RACK）：收到所有拥塞时未确认的段确认，cwnd = ssthresh ，定时器复位，进入CA阶段&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存在问题：只能恢复一个段的丢失。&lt;/p&gt;
&lt;p&gt;考虑&lt;a class=&#34;link&#34; href=&#34;https://datatracker.ietf.org/doc/html/rfc793&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC793&lt;/a&gt;，在TCP头部保留有Options&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|          Source Port          |        Destination Port       |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|             16 bit            |             16 bit            |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                         Sequence Number                       |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                              32 bit                           |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                       Acknowledgment Number                   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                              32 bit                           |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Data  |          |U|A|P|R|S|F|                                |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|Offset | Reserved |R|C|S|S|Y|I|            Window              |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|       |          |G|K|H|T|N|N|                                |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|4 bits |  6 bits  |  6 bits   |            16 bit              |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|            Checksum          |          Urgent Pointer        |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|             16 bits          |             16 bits            |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|            Options           |          Padding               |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|        variable length       |                                |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                            data                               |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过SACK，如接收方给出哪些段收到了，哪些段乱序到达了等信息给发送方。发送端一次发送多个丢失段，每RTT可以重传多个丢失段，提升效率。修改TCP首部的Options如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|     nop      |     nop       |    SACK(5)   |     L = 10      |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|    8 bits    |    8 bits     |    8 bits    |     8 bits      |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                          Left Edge                            |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                            32 bit                             |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                          Right Edge                           |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                            32 bit                             |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;SACK（Several ACK）：在NewReno的基础上，使用pipe=待确认的段数量（ 在管道中已发送出去的段数） th=cwnd&amp;gt;&amp;gt;1，cwnd=th+3。pipe不能够太满，也不能够太少。&lt;/p&gt;
&lt;h1 id=&#34;5-cubic&#34;&gt;5. Cubic&lt;/h1&gt;
&lt;p&gt;WIP&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Network Security</title>
        <link>https://chasing1020.github.io/post/network-security/</link>
        <pubDate>Thu, 06 Jan 2022 22:39:42 +0800</pubDate>
        
        <guid>https://chasing1020.github.io/post/network-security/</guid>
        <description>&lt;img src="https://chasing1020.github.io/post/network-security/rsa.webp" alt="Featured image of post Network Security" /&gt;&lt;h1 id=&#34;1-definition-of-security&#34;&gt;1. Definition of security&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;confidentiality: only sender, intended receiver should “understand” message contents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sender encrypts message&lt;/li&gt;
&lt;li&gt;receiver decrypts message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;authentication: sender, receiver want to confirm identity of each other&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;message integrity: sender, receiver want to ensure message not altered (in transit, or afterwards) without detection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;access and availability: services must be accessible and available to users. Access is the basis of availability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Without network security, the intruder can eavesdrop, insert messages, impersonation, hijacking(taking over ongoing connection), denial of service and so on.&lt;/p&gt;
&lt;h1 id=&#34;2-principles-of-cryptography&#34;&gt;2. Principles of cryptography&lt;/h1&gt;
&lt;p&gt;we can define that:&lt;/p&gt;
&lt;p&gt;m: plaintext message&lt;/p&gt;
&lt;p&gt;$K_A(m)$: ciphertext, encrypted with key $K_A$&lt;/p&gt;
&lt;p&gt;$m = K_B(K_A(m))$&lt;/p&gt;
&lt;p&gt;There are two kinds of scheme about attacking: 1. cipher-text only attack; 2. known-plaintext attack and chosen-plaintext attack.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DES: Data Encryption Standard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;56-bit symmetric key, 64-bit plaintext input. Block cipher with cipher block chaining.&lt;/p&gt;
&lt;p&gt;3DES: encrypt 3 times with 3 different keys.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AES: Advanced Encryption Standard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;processes data in 128 bit blocks.&lt;/p&gt;
&lt;p&gt;Using block chiper, the ith input as $m(i)$, let $c(i) = m(i)\ xor\ c(i-1)$.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RSA: Rivest, Shamir, Adelson algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Creating public/private key pair: Let m be the plain text message that the originator will encrypt and send to the intended recipient. Let e be the public encryption key, d the private decryption key, c the ciphertext.&lt;/p&gt;
&lt;p&gt;proof:  Let $n = pq \implies \varphi(n) = (p − 1)(q − 1)$&lt;/p&gt;
&lt;p&gt;Euler&amp;rsquo;s theorem: $m^{\varphi(n)}\equiv1\ (mod\ n)$&lt;/p&gt;
&lt;p&gt;$\implies m^{(p-1)(q-1)}\equiv1 \mod(pq)$&lt;/p&gt;
&lt;p&gt;$\implies m^{k\varphi(n)+1}\equiv m \mod(pq)$&lt;/p&gt;
&lt;p&gt;Based on the RSA basic principle, $ed = k\varphi(n)+1$.&lt;/p&gt;
&lt;p&gt;This is equivalent to say we need to satisfy: $ed\equiv1(mod \varphi(n))$&lt;/p&gt;
&lt;p&gt;If e is determined, $dmod\varphi(n)$ could be determined, using the &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Extend Euclidean algorithm&lt;/a&gt; which takes $O(log^2\varphi(n))$ to run.&lt;/p&gt;
&lt;h1 id=&#34;3-message-integrity&#34;&gt;3. Message integrity&lt;/h1&gt;
&lt;p&gt;Cryptographic technique analogous to hand-written signatures.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Digital signatures: signed message digest&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Suppose Alice receives msg m, with signature: m, $K_B^-(m)$&lt;/p&gt;
&lt;p&gt;Alice verifies $m$ signed by Bob by applying Bob’s public key $K_B^+$ to $K_B^-(m)$ then checks whether $K_B^+(K_B^-(m)) = m$&lt;/p&gt;
&lt;p&gt;If $K_B^+(K_B^-(m)) = m$, whoever signed m must have used Bob’s private key&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hash function algorithms&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MD5 hash function widely used (RFC 1321) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;computes 128-bit message digest in 4-step process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arbitrary 128-bit string x, appears difficult to construct msg m whose MD5 hash is equal to x&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SHA-1 is also used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;US standard [NIST, FIPS PUB 180-1]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;160-bit message digest&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Public key Certification Authorities (CA)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;certification authority (CA): binds public key to particular entity, &lt;strong&gt;E&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;entity (person, website, router) registers its public key with CE provides “proof of identity” to CA (bind by OS).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CA creates certificate binding identity &lt;strong&gt;E&lt;/strong&gt; to &lt;strong&gt;E&lt;/strong&gt;’s public key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;certificate containing E’s public key digitally signed by CA: CA says “this is &lt;strong&gt;E&lt;/strong&gt;’s public key”.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-securing-tcp-connections-tls&#34;&gt;4. Securing TCP connections: TLS&lt;/h1&gt;
&lt;p&gt;TLS is a widely deployed security protocol above the transport layer; supported by almost all browsers, web servers: https (port 443)&lt;/p&gt;
&lt;p&gt;TLS provides: 1.confidentiality: via &lt;em&gt;symmetric encryption&lt;/em&gt;; 2. integrity: via &lt;em&gt;cryptographic hashing&lt;/em&gt;; 3. authentication: via &lt;em&gt;public key cryptography&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;TLS needed:&lt;/p&gt;
&lt;p&gt;handshake: Alice, Bob use their certificates, private keys to authenticate each other, exchange or create shared secret.&lt;/p&gt;
&lt;p&gt;key derivation: Alice, Bob use shared secret to derive set of keys&lt;/p&gt;
&lt;p&gt;data transfer: stream data transfer: data as a series of records not just one-time transactions&lt;/p&gt;
&lt;p&gt;connection closure: special messages to securely close connection&lt;/p&gt;
&lt;p&gt;Which need four keys:&lt;/p&gt;
&lt;p&gt;$K_c$: encryption key for data sent from client to server&lt;/p&gt;
&lt;p&gt;$M_c$: MAC key for data sent from client to server&lt;/p&gt;
&lt;p&gt;$K_s$: encryption key for data sent from server to client&lt;/p&gt;
&lt;p&gt;$M_s$: MAC key for data sent from server to client&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Diffie Hellman Algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DH algorithm is based on a famous problem called Discrete Logarithm Problem (DLP).&lt;/p&gt;
&lt;p&gt;It based on a theory that if I define a prime p, and &lt;em&gt;g&lt;/em&gt; is a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Primitive_root_modulo_n&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;primitive root modulo&lt;/a&gt; p. If gives you a random number $a$, it is esay to calculate $g^amodp$. But it is difficult to get the inverse solution $a$ if you only have $p$, $g$, and $g^amodp$.&lt;/p&gt;
&lt;p&gt;They first agree between them a large prime number p, and a generator (or base) g (where 0 &amp;lt; g &amp;lt; p).&lt;/p&gt;
&lt;p&gt;Alice chooses a secret integer a (her private key) and then calculates $g^a mod p$ (which is her public key). Bob chooses his private key b, and calculates his public key in the same way.&lt;/p&gt;
&lt;p&gt;Bob knows $b$ and $g^a$, so he can calculate $(g^a)^b mod p = g^{ab} mod p$. Therefore both Alice and Bob know a shared secret $g^{ab} mod p$. An eavesdropper Eve who was listening in on the communication knows p, g, Alice’s public key $(g^a mod p)$ and Bob’s public key $(g^b mod p)$. She is unable to calculate the shared secret from these values.&lt;/p&gt;
&lt;p&gt;$(g^a mod p)^b mod p = g^{ab} mod p$&lt;/p&gt;
&lt;p&gt;$(g^b mod p)^a mod p = g^{ba} mod p$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TLS: 1.3 cipher suite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“cipher suite”: algorithms that can be used for key generation, encryption, MAC, digital signature.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client TLS hello message:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;guesses key agreement protocol (DH key agreement protocol), parameters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indicates cipher suites it supports&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;server TLS hello msg chooses&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;key agreement protocol (DH key agreement protocol), parameters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;selected cipher suite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;server-signed certificate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;then client will: 1. checks server certificate; 2. generates key; 3.can now make application request (e.g.., HTTPS GET)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recover connection:&lt;/p&gt;
&lt;p&gt;initial hello message contains encrypted application data!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;“resuming” earlier connection between client and server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application data encrypted using “resumption master secret” from earlier connection&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vulnerable to replay attacks!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maybe OK for get HTTP GET or client requests not modifying server state&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-ipsec&#34;&gt;5. IPSec&lt;/h1&gt;
&lt;p&gt;IPSec provides datagram-level encryption, authentication, integrity, and it has two types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;transport mode: only datagram payload is encrypted, authenticated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tunnel mode: entire datagram is encrypted, authenticated. Encrypted datagram encapsulated in new datagram with new IP header, tunneled to destination.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;6-firewall&#34;&gt;6. Firewall&lt;/h1&gt;
&lt;p&gt;Firewall isolates organization’s internal network from larger Internet, allowing some packets to pass, blocking others.&lt;/p&gt;
&lt;p&gt;Stateless packet filtering examples:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Policy&lt;/th&gt;
&lt;th&gt;Firewall  Setting&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;no outside Web access&lt;/td&gt;
&lt;td&gt;drop  all outgoing packets to any IP address, port 80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no incoming TCP connections, except those for institution’s public Web server only&lt;/td&gt;
&lt;td&gt;drop  all incoming TCP SYN packets to any IP except 130.207.244.203, port 80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prevent Web-radios from eating up the available bandwidth.&lt;/td&gt;
&lt;td&gt;drop  all incoming UDP packets - except DNS and router broadcasts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prevent your network from being used for a smurf DoS attack&lt;/td&gt;
&lt;td&gt;drop  all ICMP packets going to a “broadcast”  address (e.g. 130.207.255.255)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prevent your network from being tracerouted&lt;/td&gt;
&lt;td&gt;drop  all outgoing ICMP TTL expired traffic&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        
    </channel>
</rss>
